import java.util.*;
import java.nio.*;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import eu.wisebed.testbed.api.rs.RSServiceHelper;
import eu.wisebed.testbed.api.rs.v1.PublicReservationData;
import eu.wisebed.testbed.api.rs.v1.RS;

import eu.wisebed.testbed.api.snaa.v1.SNAA;
import eu.wisebed.testbed.api.snaa.v1.AuthenticationTriple;
import eu.wisebed.testbed.api.snaa.v1.SecretAuthenticationKey;
import eu.wisebed.testbed.api.snaa.helpers.SNAAServiceHelper;

import eu.wisebed.testbed.api.wsn.WSNServiceHelper;
import eu.wisebed.testbed.api.wsn.v211.*;

import de.uniluebeck.itm.tr.util.*;
import de.itm.uniluebeck.tr.wiseml.WiseMLHelper;

import de.uniluebeck.itm.wisebed.cmdlineclient.*;



//--------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------

    // Do not flash the nodes if you already flashed them before
    boolean flash = true;
    
    // Number of experiments 
    int rounds = 1;
    // Duration of one experiment
    int durationOfOneRound = 5; // in minutes
    
    
    // Endpoint URL of local controller instance, the testbed will use this URL to send us node outputs
    String localControllerEndpointURL	= "http://80.37.9.221:8089/controller";

    // Authentication credentials and other relevant information used again and again as method parameters
    String urnPrefix 					= "urn:wisebed:uzl1:";
    String username						= "koninis@wisebed1.itm.uni-luebeck.de";
    String password						= "cAbuKwJax";
    
    // Endpoint URLs of Authentication (SNAA), Reservation (RS) and Experimentation (iWSN) services
    String snaaEndpointURL 				= "http://wisebed.itm.uni-luebeck.de:8890/snaa";

    String rsEndpointURL				= "http://wisebed.itm.uni-luebeck.de:8889/rs";
	String sessionManagementEndpointURL	= "http://wisebed.itm.uni-luebeck.de:8888/sessions";

	// Retrieve Java proxies of the endpoint URLs above
	SNAA authenticationSystem 			= SNAAServiceHelper.getSNAAService(snaaEndpointURL);
	RS reservationSystem				= RSServiceHelper.getRSService(rsEndpointURL);
	SessionManagement sessionManagement = WSNServiceHelper.getSessionManagementService(sessionManagementEndpointURL); 



//--------------------------------------------------------------------------
// Application logic
//--------------------------------------------------------------------------

	//--------------------------------------------------------------------------
	// 1st step: authenticate with the system
	//--------------------------------------------------------------------------

	// build argument types
	AuthenticationTriple credentials = new AuthenticationTriple();
	credentials.setUrnPrefix(urnPrefix);
	credentials.setUsername(username);
	credentials.setPassword(password);
	List credentialsList = new ArrayList();
	credentialsList.add(credentials);

	// do the authentication
	log.info("Authenticating...");
	List secretAuthenticationKeys = authenticationSystem.authenticate(credentialsList);
	log.info("Successfully authenticated!");




    //--------------------------------------------------------------------------
    // 2nd step: reserve some nodes (here: all nodes)
    //--------------------------------------------------------------------------

	// retrieve the node URNs of all fronts iSense nodes 
    
    List frontsNodesURNs = Arrays.asList(new Object[]{
         "urn:wisebed:uzl1:0x1bb3",
         "urn:wisebed:uzl1:0x99a8",
         "urn:wisebed:uzl1:0x997e",
         "urn:wisebed:uzl1:0x14e2",
         "urn:wisebed:uzl1:0x1cca",
         "urn:wisebed:uzl1:0xf85d",
         "urn:wisebed:uzl1:0x5a34",
         "urn:wisebed:uzl1:0xcf04",
         "urn:wisebed:uzl1:0xcc33",
         "urn:wisebed:uzl1:0x151f",
         "urn:wisebed:uzl1:0x1c6c",
         "urn:wisebed:uzl1:0x1c73",
         "urn:wisebed:uzl1:0x61e1",
         "urn:wisebed:uzl1:0xf7b7",
         "urn:wisebed:uzl1:0x61e5",
         "urn:wisebed:uzl1:0x1c2c",
         "urn:wisebed:uzl1:0x1bd8",
         "urn:wisebed:uzl1:0x1bb0",
         "urn:wisebed:uzl1:0xcc3a",
         "urn:wisebed:uzl1:0x85a4",
         "urn:wisebed:uzl1:0x80f5",
         "urn:wisebed:uzl1:0x599d",
         "urn:wisebed:uzl1:0xcbe4",
         "urn:wisebed:uzl1:0xf859",
         "urn:wisebed:uzl1:0x99af",
         "urn:wisebed:uzl1:0x753d",
         "urn:wisebed:uzl1:0x1b57",
         "urn:wisebed:uzl1:0x5a35",
         "urn:wisebed:uzl1:0x1b74",
         "urn:wisebed:uzl1:0xcc3d",
         "urn:wisebed:uzl1:0x970b",
         "urn:wisebed:uzl1:0x1b5a",
         "urn:wisebed:uzl1:0x1b6b",
         "urn:wisebed:uzl1:0x1c72",
         "urn:wisebed:uzl1:0xf851",
         "urn:wisebed:uzl1:0xcff1",
         "urn:wisebed:uzl1:0x1cd2",
         "urn:wisebed:uzl1:0x7e6c",
         "urn:wisebed:uzl1:0xcc43",
         "urn:wisebed:uzl1:0x85ba",
         "urn:wisebed:uzl1:0x9960",
         "urn:wisebed:uzl1:0x9961",
         "urn:wisebed:uzl1:0x14f7",
         "urn:wisebed:uzl1:0x96f9",
         "urn:wisebed:uzl1:0xc179",
         "urn:wisebed:uzl1:0x96df",
         "urn:wisebed:uzl1:0x9995",
         "urn:wisebed:uzl1:0x971e",
         "urn:wisebed:uzl1:0xcbe5",
         "urn:wisebed:uzl1:0x1234",
         "urn:wisebed:uzl1:0x14e0",
         "urn:wisebed:uzl1:0x96f0",
         "urn:wisebed:uzl1:0x1721",
         "urn:wisebed:uzl1:0x5980"
    });
    
	
    //String serializedWiseML = sessionManagement.getNetwork();
	//List frontsNodesURNs = WiseMLHelper.getNodeUrns(serializedWiseML, new String[] {});
	log.info("Used nodes: {}", Arrays.toString(frontsNodesURNs.toArray()));
    
    
	// create reservation request data to reserve all iSense nodes for 10 minutes
	ConfidentialReservationData reservationData = helper.generateConfidentialReservationData(
			frontsNodesURNs,
			new Date(), durationOfOneRound*rounds+2, TimeUnit.MINUTES,
			urnPrefix, username
	);

	// do the reservation
	log.info("Trying to reserve the following nodes: {}", frontsNodesURNs);
    List secretReservationKeys = reservationSystem.makeReservation(
    		helper.copySnaaToRs(secretAuthenticationKeys),
    		reservationData
    );
    log.info("Successfully reserved nodes: {}", frontsNodesURNs);




	//--------------------------------------------------------------------------
	// 3rd step: start local controller instance
	//--------------------------------------------------------------------------

	AsyncJobObserver jobs = new AsyncJobObserver(1, TimeUnit.MINUTES); //Timeout for join until unfinished jobs are removed

	HtmlWriter htmlLogWriter = null;
	String htmlLogFile = "log.html";

	if( htmlLogFile != null ) {
		htmlLogWriter = new HtmlWriter(new FileWriter(new File(htmlLogFile), false));
		jobs.addListener(htmlLogWriter);
	}
        
public class MyController implements Controller{
		HtmlWriter htmlLogWriter;

		MyController(HtmlWriter htmlLogWriter) {
			this.htmlLogWriter = htmlLogWriter;
		}
        	
		public void receive(Message msg) {

			String s = helper.toString(msg);
			log.debug("Received message: " + s);

			if( htmlLogWriter != null )
				htmlLogWriter.receiveMessage(msg);
			}
        
			public void receiveStatus(RequestStatus status) {
				jobs.receive(status);
			}
		}

	DelegatingController delegator = new DelegatingController(new MyController(htmlLogWriter));
	delegator.publish(localControllerEndpointURL);
	log.info("Local controller published on url: {}", localControllerEndpointURL);



	//--------------------------------------------------------------------------
	// 4th step: get WSN API instance URL --> call getInstance() on Session Management service
	//--------------------------------------------------------------------------

	log.debug("Using the following parameters for calling getInstance(): {}, {}",
			StringUtils.jaxbMarshal(helper.copyRsToWsn(secretReservationKeys)),
			localControllerEndpointURL
	);

	String wsnEndpointURL = sessionManagement.getInstance(
			helper.copyRsToWsn(secretReservationKeys),
			localControllerEndpointURL
	);

	log.info("Got an WSN instance URL, endpoint is: {}", wsnEndpointURL);
	WSN wsn = WSNServiceHelper.getWSNService(wsnEndpointURL);



	//--------------------------------------------------------------------------
	// Steps 5: Flash nodes
	//--------------------------------------------------------------------------
    log.info("Starting experiments...");

	Thread.sleep(2000);
    
    if (flash)
    {
        // now flash a program to the nodes
        log.info("Flash nodes with fronts program.");

        List programIndices = new ArrayList();
        for (int i=0; i<frontsNodesURNs.size(); i++) {
            programIndices.add(0);
        }

        List programs = new ArrayList();
        programs.add(helper.readProgram(
                "out/clustering_test_app.bin",
                "neighborDiscovery",
                "",
                "iSense",
                "1.0"
        ));
        jobs.submit(new Job(
            "flash nodes",
            wsn.flashPrograms(frontsNodesURNs, programIndices, programs),
            frontsNodesURNs,
            Job.JobType.flashPrograms
        ));
        jobs.join();
        
        Thread.sleep(2000);
    }

    
    //--------------------------------------------------------------------------
	// Steps 6..n: Experiment control using the WSN API
	//--------------------------------------------------------------------------

    
		for (int i=0; i<rounds; i++)
		{
			/*
			// Reset nodes		
			jobs.submit(new Job("reset nodes", wsn.resetNodes(frontsNodesURNs), frontsNodesURNs, Job.JobType.resetNodes));
			jobs.join();

			Thread.sleep(5000);
			
			// Send a message to nodes via uart (to receive them enable RX_UART_MSGS in the fronts_config.h-file)
			Message msg = new Message();
			BinaryMessage bmsg = new BinaryMessage();
			bmsg.setBinaryData(new byte[]{0x1,0x1}); //command (1 = hello module) and sub command
			bmsg.setBinaryType((byte) 0xa); // the fronts app listens for type 0xa
			msg.setBinaryMessage(bmsg);
			msg.setSourceNodeId("urn:wisebed:uzl1:0xffff");
			msg.setTimestamp(DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)GregorianCalendar.getInstance()));
			jobs.submit(new Job("send", wsn.send(frontsNodesURNs, msg), frontsNodesURNs, Job.JobType.send));
			jobs.join();
*/
				long millis = 0 ;
				while (millis<(durationOfOneRound*rounds*1000*60)){
					Thread.sleep(20000);
					millis += 20000;
					log.debug(millis/1000 + " of total "+((durationOfOneRound*rounds*1000*60)/1000) );
				}
					
			control.end();
/*			
			
			// Send a message to nodes via uart (to receive them enable RX_UART_MSGS in the fronts_config.h-file)
			Message msg = new Message();
			BinaryMessage bmsg = new BinaryMessage();
			bmsg.setBinaryData(new byte[]{0x1,0x2}); //command (1 = hello module) and sub command
			bmsg.setBinaryType((byte) 0xa); // the fronts app listens for type 0xa
			msg.setBinaryMessage(bmsg);
			msg.setSourceNodeId("urn:wisebed:uzl1:0xffff");
			msg.setTimestamp(DatatypeFactory.newInstance().newXMLGregorianCalendar((GregorianCalendar)GregorianCalendar.getInstance()));
			jobs.submit(new Job("send", wsn.send(iSenseNodeURNs, msg), frontsNodesURNs, Job.JobType.send));
			jobs.join();
*/
		}

	

    //--------------------------------------------------------------------------
   	// Steps n+1: Shutdown WSN API endpoint (optional)
   	//--------------------------------------------------------------------------
   	System.out.println("Demonstration done. Please press any key to quit...");
	System.in.read();
    
    log.info("Done running experiments. Now freeing WSN service instance...");
	sessionManagement.free(helper.copyRsToWsn(secretReservationKeys));

	log.info("Freed WSN service instance. Shutting down...");
	System.exit(0);
