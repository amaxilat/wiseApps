import java.util.*;
import java.nio.*;
import java.lang.String;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.lang.System;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import eu.wisebed.testbed.api.rs.RSServiceHelper;
import eu.wisebed.testbed.api.rs.v1.PublicReservationData;
import eu.wisebed.testbed.api.rs.v1.RS;
import eu.wisebed.testbed.api.snaa.v1.SNAA;
import eu.wisebed.testbed.api.snaa.v1.AuthenticationTriple;
import eu.wisebed.testbed.api.snaa.v1.SecretAuthenticationKey;
import eu.wisebed.testbed.api.snaa.helpers.SNAAServiceHelper;
import eu.wisebed.testbed.api.wsn.WSNServiceHelper;
import eu.wisebed.testbed.api.wsn.v211.*;
import de.uniluebeck.itm.tr.util.*;
import de.itm.uniluebeck.tr.wiseml.WiseMLHelper;
import de.uniluebeck.itm.wisebed.cmdlineclient.*;

//--------------------------------------------------------------------------
// Configuration
//--------------------------------------------------------------------------

    // Do not flash the nodes if you already flashed them before
    boolean flash = true;
    
	// Number of experiments 
    int rounds = 1;
	// Duration of one experiment
    int duration = 3; // in minutes
	if(flash)
		duration=3;

	System.out.println("Host is "+ InetAddress.getLocalHost().getCanonicalHostName() );
		
    // Endpoint URL of local controller instance, the testbed will use this URL to send us node outputs
    String localControllerEndpointURL	= "http://150.140.5.104:8089/controller";
	if ( InetAddress.getLocalHost().getCanonicalHostName().equals("hercules.cti.gr")){
		System.out.println("Set endpoint to hercules.cti.gr");
		localControllerEndpointURL	= "http://hercules.cti.gr:8089/controller";
	}
	else if ( InetAddress.getLocalHost().getCanonicalHostName().equals("kandalf")){
		System.out.println("Set endpoint to qopbot.dyndns.org");
		localControllerEndpointURL	= "http://qopbot.dyndns.org:8089/controller";
	}

        //load credentials
        source("credentials_luebeck.bsh");

//--------------------------------------------------------------------------
// Application logic
//--------------------------------------------------------------------------

	//--------------------------------------------------------------------------
	// 1st step: authenticate with the system
	//--------------------------------------------------------------------------

	source("include/authenticate.bsh");

//--------------------------------------------------------------------------
// 2nd step: reserve some nodes (here: all nodes)
//--------------------------------------------------------------------------

	// retrieve the node URNs of all fronts iSense nodes 

        source("sensors_luebeck22.bsh");
   	
	//make reservation
	source("include/reserve_now.bsh");

//--------------------------------------------------------------------------
// 3rd step: start local controller instance
//--------------------------------------------------------------------------
	
	AsyncJobObserver jobs = new AsyncJobObserver(60, TimeUnit.SECONDS); //Timeout for join until unfinished jobs are removed

   	source("include/controller.bsh");
	
	source("include/start_controller.bsh");

//--------------------------------------------------------------------------
// 4th step: get WSN API instance URL --> call getInstance() on Session Management service
//--------------------------------------------------------------------------

	source("include/get_instance.bsh");

//--------------------------------------------------------------------------
// Steps 5: Flash nodes
//--------------------------------------------------------------------------
	log.info("Starting experiments...");

	Thread.sleep(2000);
    
	if (flash)
	{
		// now flash a program to the nodes
		log.info("Flash nodes with selected program.");

		List programIndices = new ArrayList();
	        for (int i=0; i<iSenseNodeURNs.size(); i++) {
	            programIndices.add(0);
	        }

		List programs = new ArrayList();
		programs.add(helper.readProgram(
//			"/home/amaxilatis/Applications/trunk/isense_sdk/iApps/SecurityModuleDemoApplication/bin/JN5139R1/SecurityModuleDemoApplication.bin", //tzikis Lamp
//			"/home/amaxilatis/Documents/Dropbox/trunk/isense_sdk/iApps/iSenseCollectorApplication/bin/JN5139R1/iSenseCollectorApp.bin",
			"/home/amaxilatis/Applications/wisebed/wiselib/trunk/applications/clustering_test/out/clustering_test_app.bin",//frontsclustering
//			"/home/amaxilatis/Desktop/iSerAerial16bit.bin",
//			"/home/amaxilatis//Applications/wisebed/wiselib/trunk/applications/fronts_unified_app/out/fronts_unified_app.bin",
//			"/home/amaxilatis/Documents/Dropbox/trunk/isense_sdk/iApps/BandwidthTester/bin/JN5139R1/BandwidthTester.bin",
//			"/home/amaxilatis/Applications/wisebed/wiselib/trunk/applications/clustering_app/out/clustering_app.bin",//myclustering
//			"/home/amaxilatis/Documents/Dropbox/trunk/isense_sdk/iApps/EnvironmentModuleDemoApplication/bin/JN5139R1/EnvironmentModuleDemoApplication.bin",
//			"/home/amaxilatis/Desktop/iSenseDemoApp.ihex",//telosb
		        "Clustering",
		        "",
		        "iSense",
		        "1.0"
		));

		// Reset nodes		
		jobs.submit(new Job("reset nodes", wsn.resetNodes(iSenseNodeURNs), iSenseNodeURNs, Job.JobType.resetNodes));
		jobs.join();

		jobs.submit(new Job(
		    "flash nodes",
		    wsn.flashPrograms(iSenseNodeURNs, programIndices, programs),
		    iSenseNodeURNs,
		    Job.JobType.flashPrograms
		));
	        jobs.join();
     
	        Thread.sleep(5000);
	    }

//--------------------------------------------------------------------------
// Steps n+1: Shutdown WSN API endpoint (optional)
//--------------------------------------------------------------------------
   	System.out.println("Done. Please wait to quit...");

	log.info("Done running experiments. Now freeing WSN service instance...");
	sessionManagement.free(helper.copyRsToWsn(secretReservationKeys));
	log.info("Freed WSN service instance. Shutting down...");
	log.info("Please Wait...");
		
	System.exit(0);
